// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ValueType {
  Analog
  Digital
}

model User {
  id          Int          @id @default(autoincrement())
  surname     String?
  name        String?
  city        String?
  address     String?
  email       String       @unique
  password    String
  accessToken AccessToken? // one-to-one relation to AccessToken
}

model AccessToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Thing {
  id          Int     @id @default(autoincrement())
  description String
  title       String
  topics      Topic[]
}

model Topic {
  id          Int      @id @default(autoincrement())
  location    String
  subject     String
  description String
  title       String
  thing       Thing    @relation(fields: [thingId], references: [id])
  thingId     Int
  sensors     Sensor[]
}

model Sensor {
  id           Int           @id @default(autoincrement())
  value_type   ValueType
  unit         String
  flip_value   Boolean
  model        String
  topic        Topic         @relation(fields: [topicId], references: [id])
  topicId      Int
  observations Observation[]
}

model Observation {
  id         Int      @id @default(autoincrement())
  value      Float
  created_at DateTime @default(now())
  sensor     Sensor   @relation(fields: [sensorId], references: [id])
  sensorId   Int
}
